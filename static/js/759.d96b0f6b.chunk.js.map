{"version":3,"file":"static/js/759.d96b0f6b.chunk.js","mappings":"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","sources":["components/Contacts/contacts.styled.jsx","components/Contacts/contacts.jsx","components/Filter/filter.styled.jsx","components/Filter/filter.jsx","components/Form/form.styled.jsx","components/Form/form.jsx","pages/Contacts.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List =styled.ul`\n  padding-left: 0;\n`\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 15px;\n  font-size: 33px;\n  gap: 10px;\n`;\nexport const Button = styled.button`\n    width: 75px;\n    height: 35px;\n    background-color: #f2f83a;\n    border-radius: 5px;\n    &:hover{\n    background-color: #ed1c1c;\n    }\n` \nexport const Paragraf = styled.p`\n    margin: 0;\n`","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilter, selectContacts } from 'redux/selectors';\nimport {List, Item, Button, Paragraf } from './contacts.styled';\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const dataFilter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n    \n  const onFilteredContacts = () => {\n    if (dataFilter) {\n      const normalisedContacts = dataFilter.toLowerCase();\n      return contacts.filter(({ name }) =>\n        name.toLowerCase().includes(normalisedContacts)\n      );\n    }\n    return contacts;\n  };\n  \n  const filteredContacts = onFilteredContacts();\n  return (\n    <List>\n      {filteredContacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <Paragraf>\n            {name}: {number}\n          </Paragraf>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            DELETE\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactsList;\n","import styled from \"styled-components\";\n\nexport const WraperFilter = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: start;\n  width: 500px;\n  padding: 15px;\n  border: 3px solid blue;\n  border-radius: 7px;\n`;\nexport const Label = styled.label`\n    margin: 0 10px;       \n    `\nexport const Input = styled.input`\n    margin: 10px;\n    font-size: 26px;\n    width: 200px;\n    height: 35px;\n    border-radius: 7px;\n    border-color: #60a1fb;\n    &:hover {\n    border-color: #1047c7;\n  }\n`","\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { filterContact } from 'redux/contacts/contactsFilterSlice';\nimport { selectFilter } from \"redux/selectors\";\nimport { WraperFilter, Label, Input } from \"./filter.styled\"\n\nconst Filter = () => {\n    const dataFilter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  \n  const HandlChange = e => {\n    dispatch(filterContact(e.target.value));\n  }\n    return (\n      <WraperFilter>\n        <Label htmlFor=\"labelFilter\">Filter by name</Label>\n        <Input type=\"text\" value={dataFilter} onChange={HandlChange} />\n      </WraperFilter>\n    );}\n\nexport default Filter","import styled from \"styled-components\";\n\nexport const WraperForm = styled.div`\n    display: flex;\n    flex-direction: column;\n    text-align: start;\n    padding: 15px;\n    width: 500px;\n    border: 4px solid blue;\n    border-radius: 8px;\n`\nexport const Label = styled.label`\n  display: flex;\n  margin: 0 10px;\n`;\nexport const Input = styled.input`\n    margin: 10px;\n    font-size: 26px;\n    width: 200px;\n    height: 35px;\n    border-radius: 7px;\n    border-color: #60a1fb;\n    &:hover {\n    border-color: #1047c7;\n  }\n`\nexport const BtnSubmit = styled.button`\n    margin: 10px;\n    font-size: 26px;\n    width: 205px;\n    height: 35px;\n    background-color: #c6d6eb;\n    border-radius: 7px;\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n    cursor: pointer;\n`","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid'\nimport { WraperForm, Input, BtnSubmit, Label } from './form.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\n\n\nconst Form = ()=> {\n  const [contact, setContact] = useState({\n    name: '',\n    number: '',\n  });\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    setContact(prev => ({ ...prev, [target.name]: target.value }));\n  };\n\n  const isContactExsist = newName => {\n    if (contacts.length) {\n      return contacts.find(({ name }) => name === newName);\n    }\n  };\n\n  const addNewContact = newContact => {\n    isContactExsist(newContact.name)\n      ? alert(`${newContact.name} is already in contacts`)\n      : dispatch(addContact(newContact));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const id = nanoid(5);\n    const {name, number} = contact\n    addNewContact({ id, name, number  });\n   setContact({name:'', number:''});\n  };\n\n  return (\n      <WraperForm>\n    <form onSubmit={handleSubmit}>\n        <Label htmlFor=\"nameInput\" className=\"lableInputName\">\n          Name\n        </Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          value={contact.name}\n        />\n        <Label htmlFor=\"numberInput\" className=\"lableInputNumber\">\n          Number\n        </Label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={contact.number}\n        />\n        <BtnSubmit type=\"submit\" className=\"btnSubmit\">\n          Add contact\n        </BtnSubmit>\n    </form>\n      </WraperForm>\n  );\n};\n\nexport default Form;\n","import { Container } from 'components/mainContainer.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport ContactsList from 'components/Contacts/contacts';\nimport Filter from 'components/Filter/filter';\nimport Form from 'components/Form/form';\nimport Loader from 'components/Loader/loader';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <ContactsList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["List","styled","Item","Button","Paragraf","contacts","useSelector","selectContacts","dataFilter","selectFilter","dispatch","useDispatch","filteredContacts","normalisedContacts","toLowerCase","filter","name","includes","onFilteredContacts","map","id","number","type","onClick","deleteContact","WraperFilter","Label","Input","htmlFor","value","onChange","e","filterContact","target","WraperForm","BtnSubmit","useState","contact","setContact","handleChange","prev","addNewContact","newContact","newName","length","find","isContactExsist","addContact","alert","onSubmit","preventDefault","nanoid","className","required","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}